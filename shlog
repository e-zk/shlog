#!/bin/sh -e
#
#

usage() {
	cat<<EOF
shlog - shell blog
usage: shlog [i|index] [r|rss] [u|update]

	i|index
	r|rss
	u|update
EOF
}

# basename implementation
# (from pure-sh-bible)
bname() {
	dir=${1%${1##*[!/]}}
	dir=${dir##*/}
	dir=${dir%"$2"}
	printf '%s\n' "${dir:-/}"
}

# cross-platform reverse cat
reverse() {
	if command -v tac >/dev/null; then
		echo "$1" | tac
	else
		echo "$1" | tail -r
	fi
}

# log
# $1 : message
# $2 : (optional) log label
log() {
	message="$1"
	level="$2"

	if [ -z "$level" ]; then
	        printf "%s\\n" "$message"
	        return
	fi

	printf "[%s] %s\\n" "$level" "$message"
}

# get markdown article title by extracting the first h1
# requires the first line of all post .md files to be the h1
# $1 : markdown file
get_md_title() {
	md_file="$1"
	head -n 1 "$md_file" | sed -e 's/^#\ \(.*\)$/\1/g'
}

# get date from post filename
# $1 : markdown file
get_post_date() {
	md_filename="$(bname "$1")"
	echo "$md_filename" | sed -e 's/^\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\)-.*$/\1/g'
}

# get list of all posts
get_post_list() {
	posts=''
	for post in ${POSTS_DIR}/*.html; do
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# get list of unposted posts (.md files without their .html counterparts)
get_unpost_list() {
	posts=''
	for post in ${POSTS_DIR}/*.md; do
		# if the .html exists, it has already been compiled
		if [ -f "${post%%.*}.html" ]; then
			continue
		fi
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# generate navgation html
gen_html_nav() {
	printf '<nav>\n'
	printf '<p>\n'
	printf '<a href="%s">%s</a>\n' "/" "$DOMAIN"
	cat "$NAV_CONTENT"
	printf '</p>\n'
	printf '</nav>\n'
}

# generate html head
# $1 : html title
gen_html_head() {
	html_title="$1"

	printf '<head>\n'
	cat "$HEAD_CONTENT"
	printf '<title>%s</title>' "$html_title"
	printf '</head>\n'
}

# generate post's html
# $1 : post title
# $2 : post html content
gen_html_post() {
	post_title="$1"
	post_content="$2"

	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${post_title} - ${WWW_TITLE}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	printf '%s\n' "$post_content"
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}

# generate posts index page
gen_index() {
	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${WWW_TITLE}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	printf '<h1>Web log</h1>\n'
	printf '<ul class="postslist">\n'

	#  for each post add a list item
	for post in $(get_post_list); do
		post_md="${post%%.*}.md"
		post_date="$(get_post_date "$post")"
		post_title="$(get_md_title "$post_md")"
		post_bname="$(bname "$post")"

		printf '<li><a href="%s/posts/%s"><span class="postdate">%s</span> &bull; %s</li>\n' "$WWW" "${post_bname%%.*}" "$post_date" "$post_title"
	done

	printf '</ul>\n'
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}

# compile all .md files without .html couterparts
compile_posts() {
	posts="$(get_unpost_list)"

	# return if there are no posts to update
	if [ -z "$posts" ]; then
		log "no posts to update"
		return
	fi

	# for each .md file without a .html counterpart...
	for post in $posts; do
	
		if [ -z "$post" ]; then
			continue
		fi

		log "adding $(bname "$post")..."

		# md
		post_md="${post%%.*}.md"

		# get post date
		post_date="$(get_post_date "$post")"

		# get post title
		post_title="$(get_md_title "$post_md")"

		# generate html from markdown
		post_html="$(lowdown -Thtml "$post")"

		# generate the post's html
		gen_html_post "$post_title" "$post_html" > "${post%%.*}.html"
	done

}

main() {

	# load config
	DEF_CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/shlog/shlog.conf"
	if [ -f "${DEF_CONFIG}" ]; then
		. "${DEF_CONFIG}"
	else
		log "cannot load config. exiting" "error"
		exit 1
	fi

	# 
	case "$1" in
		h|-h|help)   usage                                 ;;
		""|u|update) compile_posts                         ;;
		i|index)     gen_index > "${POSTS_DIR}/index.html" ;;
		*)           log "unsupported command $1" "error"  ;;
	esac
}

main "$@"
