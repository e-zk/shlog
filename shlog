#!/bin/sh -e
#
#

usage() {
	cat<<EOF
shlog - shell blog
usage: shlog [i|index] [r|rss] [u|update]

	i|index
	p|page [file] [title] [output]
	r|rss
	u|update
EOF
}

# basename implementation
# (from pure-sh-bible)
bname() {
	dir=${1%${1##*[!/]}}
	dir=${dir##*/}
	dir=${dir%"$2"}
	printf '%s\n' "${dir:-/}"
}

# is 
is_yes() {
	case "$1" in
		y|Y*) return 0   ;;
		n|N*) return 127 ;;
	esac
	return 127
}

# convert input date to RFC2822
# time and tz are set to 00:00:00 +0000
# $1 - input date
# $2 - input date format
date_to_rfc2822() {
	date="$1"
	format="$2"
	rfc2822="+a, %d %b %Y 00:00:00 +0000"

	# note: for full conversion (time + tz) replace $rfc2822 with:
	# "+%a, %d %b %Y %T %z"

	# if on Linux, use GNU date syntax
	if [ "$(uname)" = "Linux" ]; then
		date -d "$date" "$rfc2822"
	else
		date -j -f "$format" "$date" "$rfc2822"
	fi
}

# cross-platform reverse cat
reverse() {
	if command -v tac >/dev/null; then
		echo "$1" | tac
	else
		echo "$1" | tail -r
	fi
}

# log
# $1 - message
# $2 - (optional) log 'label'
log() {
	message="$1"
	label="$2"

	if [ -z "$label" ]; then
	        printf "%s: %s\\n" "$(bname $0)" "$message"
	        return
	fi

	printf "%s: %s: %s\\n" "$(bname $0)" "$label" "$message"
}

#
die() {
	message="$1"

	if [ -n "$message" ]; then
		log "$message" "error"
	fi

	printf 'exiting.\\n'
	exit 1
}

# get markdown article title by extracting the first h1.
# requires the first line of the markdown file to be the h1.
# $1 - markdown file
get_md_title() {
	md_file="$1"
	head -n 1 "$md_file" | sed -e 's/^#\ \(.*\)$/\1/g' -e 's/\`//g'
}

# get date from post filename.
# requires filename to be YYYY-MM-DD-blahblah-blah.md
# $1 - markdown file
get_post_date() {
	md_filename="$(bname "$1")"
	echo "$md_filename" | sed -e 's/^\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\)-.*$/\1/g'
}

# get list of all posts
get_post_list() {
	posts=''
	for post in ${posts_dir}/*.html; do
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# get list of unposted posts (.md files without their .html counterparts)
get_unpost_list() {
	posts=''
	for post in ${posts_dir}/*.md; do
		# if the .html exists, it has already been compiled
		if [ -f "${post%%.*}.html" ]; then
			continue
		fi
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# generate navgation/header html
gen_html_nav() {
	printf '<header>\n'
	printf '<nav>\n'
	printf '<a href="%s">%s</a>\n' "/" "$fqdn"
	if [ -n "$nav_content" ]; then
		if [ -f "$nav_content" ]; then
			cat "$nav_content"
		else
			die "nav_content file `${nav_content}' does not exist."
		fi
	fi
	printf '</nav>\n'
	printf '</header>\n'
}

# generate html head
# $1 - html title
gen_html_head() {
	html_title="$1"

	printf '<head>\n'
	if [ -n "$head_content" ]; then
		if [ -f "$head_content" ]; then
			cat "$head_content"
		else
			die "head_content file `${head_content}' does not exist."
		fi
	fi
	printf '<title>%s</title>' "$html_title"
	printf '</head>\n'
}

# generate footer
# $1 - post plaintext link
# $2 - date posted
# $3 - post last modified
gen_html_footer() {
	post_pt="$1"
	post_date="$2"
	post_modified="$3"
	
	printf '<footer>\n'
	printf 'Posted: %s<br>\n' "$post_date"
	printf 'Modified: %s<br>\n' "$post_modified"
	printf 'Plaintext: <a href=\"%s\">View</a>\n' "$(bname "$post_pt")"
	cat "$FOOTER_CONTENT"
	printf '</footer>\n'
}

# generate post's html
# $1 - post title
# $2 - post html content
# $3 - post info/footer (optional)
gen_html_post() {
	post_title="$1"
	post_content="$2"
	post_foot="${3:-''}"

	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${post_title} - ${site_title}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	printf '%s\n' "$post_content"
	printf '</main>\n'
	printf '%s\n' "$post_foot"
	printf '</body>\n'
	printf '</html>\n'
}

# generate posts index page
gen_index() {
	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${site_title}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'

	if [ -n "$postindex_content" ]; then
		if [ -f "$postindex_content" ]; then
			cat "$postindex_content"
		else
			die "postindex_content file `${postindex_content}' does not exist."
		fi
	fi

	printf '<ul class="postslist">\n'

	# add a <li> for each post
	for post in $(get_post_list); do
		post_md="${post%%.*}.md"
		post_date="$(get_post_date "$post")"
		post_title="$(get_md_title "$post_md")"
		post_bname="$(bname "$post")"

		# use full paths, or relative paths ?
		if is_yes "$use_relative_paths"; then
			post_url="/posts/${post_bname%%.*}"
		else
			post_url="${base_url}/posts/${post_bname%%.*}"
		fi

		# add .html to the end of links ?
		if is_yes "$add_html_to_links"; then
			post_url="${post_url}.html"
		fi

		# construct 
		# TODO: find a better way to do this
		fmt="$(echo "$post_list_format" | sed \
			-e "s/%d/${post_date}/g" \
			-e "s/%t/${post_title}/g" \
			-e "s,%l,${post_url},g")"

		printf '<li>%s</li>\n' "$fmt"
	done

	printf '</ul>\n'
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}

# generate rss feed
gen_rss() {
	printf '<rss version="2.0" xml:base="%s">\n' "${base_url}"
	printf '<channel>\n'
	printf '<title>%s</title>\n' "${rss_title}"
	printf '<description/>\n'
	printf '<link>%s</link>\n' "${rss_link}"

	# add an <item> for each post
	for post in $(get_post_list); do
		post_md="${post%%.*}.md"
		post_date="$(get_post_date "$post")"
		post_title="$(get_md_title "$post_md")"
		post_bname="$(bname "$post")"

		printf '<item>\n'
		printf '<link>%s</link>\n'       "${base_url}/posts/${post_bname%%.*}"
		printf '<title>%s</title>\n'     "$post_title"

		# include post content ?
		if is_yes "$rss_include_html"; then
			post_html="$(lowdown -Thtml "$post_md")"

			printf '<description>\n'
			printf '%s\n' "$post_html"
			printf '</description>\n'
		fi

		printf '<pubDate>%s</pubDate>\n' "$(date_to_rfc2822 "$post_date" '%F')"
		printf '</item>\n'
	done

	printf '</channel>\n'
	printf '</rss>\n'
}

# generate a blank page
# $1 - page title
# $2 - page file
gen_page() {
	page_title="$1"
	page_file="$2"

	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${page_title} - ${site_title}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	lowdown -Thtml "$page_file"
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}

# compile all .md files without .html couterparts
compile_posts() {
	posts="$(get_unpost_list)"

	# return if there are no posts to update
	if [ -z "$posts" ]; then
		log "no posts to update"
		return
	fi

	# for each .md file without a .html counterpart...
	for post in $posts; do

		if [ -z "$post" ]; then
			continue
		fi

		log "adding $(bname "$post")..."

		# md
		post_md="${post%%.*}.md"

		# get post date
		post_date="$(get_post_date "$post")"

		# the current date is the last modified date
		post_modified="$(date '+%F')"

		# get post title
		post_title="$(get_md_title "$post_md")"

		# generate html from markdown
		post_html="$(lowdown -Thtml "$post")"

		# generate footer
		post_foot="$(gen_html_footer "$post_md" "$post_date" "$post_modified")"

		# generate the post's html
		gen_html_post "$post_title" "$post_html" "$post_foot" > "${post%%.*}.html"
	done

}

main() {

	# load config
	DEF_CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/shlog/shlog.conf"
	if [ -f "${DEF_CONFIG}" ]; then
		. "${DEF_CONFIG}"
	else
		log "cannot load config. exiting" "error"
		exit 1
	fi

	# 
	case "$1" in
		h|-h|help)   usage                                 ;;
		""|u|update) compile_posts                         ;;
		i|index)     gen_index > "$posts_index"            ;;
		r|rss)       gen_rss > "$rss_feed"                 ;;
		p|page)      gen_page "$3" "$2" > "$4"             ;;
		*)           log "unsupported command $1" "error"  ;;
	esac
}

main "$@"
