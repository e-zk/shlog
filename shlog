#!/bin/sh -e
#
#

usage() {
	cat<<EOF
shlog - shell blog
usage: shlog [i|index] [r|rss] [u|update]

	i|index
	r|rss
	u|update
EOF
}

# basename implementation
# (from pure-sh-bible)
bname() {
	dir=${1%${1##*[!/]}}
	dir=${dir##*/}
	dir=${dir%"$2"}
	printf '%s\n' "${dir:-/}"
}

# is 
is_yes() {
	case "$1" in
		y|Y*) return 0 ;;
		n|N*) return 1 ;;
	esac
	return 1
}

# convert input date to RFC2822
# time and tz are set to 00:00:00 +0000
# (only works with bsd date)
# $1 - input date
# $2 - input date format
date_to_rfc2822() {
	date="$1"
	format="$2"
	# for full conversion
	#date -j -f "${format}" "${date}" "+%a, %d %b %Y %T %z"
	date -j -f "${format}" "${date}" "+%a, %d %b %Y 00:00:00 +0000"
}

# cross-platform reverse cat
reverse() {
	if command -v tac >/dev/null; then
		echo "$1" | tac
	else
		echo "$1" | tail -r
	fi
}

# log
# $1 - message
# $2 - (optional) log label
log() {
	message="$1"
	level="$2"

	if [ -z "$level" ]; then
	        printf "%s\\n" "$message"
	        return
	fi

	printf "[%s] %s\\n" "$level" "$message"
}

# get markdown article title by extracting the first h1
# requires the first line of all post .md files to be the h1
# $1 - markdown file
get_md_title() {
	md_file="$1"
	head -n 1 "$md_file" | sed -e 's/^#\ \(.*\)$/\1/g'
}

# get date from post filename
# $1 - markdown file
get_post_date() {
	md_filename="$(bname "$1")"
	echo "$md_filename" | sed -e 's/^\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\)-.*$/\1/g'
}

# get list of all posts
get_post_list() {
	posts=''
	for post in ${POSTS_DIR}/*.html; do
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# get list of unposted posts (.md files without their .html counterparts)
get_unpost_list() {
	posts=''
	for post in ${POSTS_DIR}/*.md; do
		# if the .html exists, it has already been compiled
		if [ -f "${post%%.*}.html" ]; then
			continue
		fi
		if [ "$(bname "$post")" = "index.html" ]; then
			continue
		fi
		posts="${posts}\\n${post}"
	done
	reverse "$posts"
}

# generate navgation html
gen_html_nav() {
	printf '<nav>\n'
	printf '<p>\n'
	printf '<a href="%s">%s</a>\n' "/" "$DOMAIN"
	cat "$NAV_CONTENT"
	printf '</p>\n'
	printf '</nav>\n'
}

# generate html head
# $1 - html title
gen_html_head() {
	html_title="$1"

	printf '<head>\n'
	cat "$HEAD_CONTENT"
	printf '<title>%s</title>' "$html_title"
	printf '</head>\n'
}

# generate info
# $1 - post plaintext
# $2 - post date
# $3 - post last modified
gen_html_info() {
	post_pt="$1"
	post_date="$2"
	post_modified="$3"
	
	printf '<p class="info">\n'
	printf '<a href="%s">plaintext</a><br/>\n' "$(bname "$post_pt")"
	printf 'created:%s modified:%s\n' "$post_date" "$post_modified"
	printf '</p>\n'
}

# generate post's html
# $1 - post title
# $2 - post html content
# $3 - post info/footer (optional)
gen_html_post() {
	post_title="$1"
	post_content="$2"
	post_foot="${3:-''}"

	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${post_title} - ${WWW_TITLE}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	printf '%s\n' "$post_content"
	printf '%s\n' "$post_foot"
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}

# generate posts index page
gen_index() {
	printf '<!DOCTYPE html>\n'
	printf '<html>\n'
	gen_html_head "${WWW_TITLE}"
	printf '<body>\n'
	gen_html_nav
	printf '<main>\n'
	cat "$POSTINDEX_CONTENT"
	printf '<ul class="postslist">\n'

	# add a <li> for each post
	for post in $(get_post_list); do
		post_md="${post%%.*}.md"
		post_date="$(get_post_date "$post")"
		post_title="$(get_md_title "$post_md")"
		post_bname="$(bname "$post")"

		# use full paths, or relative paths ?
		if is_yes "$REL_PATHS"; then
			post_url="/posts/${post_bname%%.*}"
		else
			post_url="${WWW}/posts/${post_bname%%.*}"
		fi

		# TODO: find a better way to do this
		fmt="$(echo "$POST_LIST_FORMAT" | sed -e "s/%d/${post_date}/" -e "s,%t,${post_title},")" 

		printf '<li><a href="%s">%s</li>\n' "$post_url" "$fmt"
	done

	printf '</ul>\n'
	printf '</main>\n'
	printf '</body>\n'
	printf '</html>\n'
}


# generate rss feed
gen_rss() {
	printf '<rss version="2.0" xml:base="%s">\n' "${WWW}"
	printf '<channel>\n'
	printf '<title>%s</title>\n' "${RSS_TITLE}"
	printf '<description/>\n'
	printf '<link>%s</link>\n' "${RSS_LINK}"

	# add an <item> for each post
	for post in $(get_post_list); do
		post_md="${post%%.*}.md"
		post_date="$(get_post_date "$post")"
		post_title="$(get_md_title "$post_md")"
		post_bname="$(bname "$post")"

		printf '<item>\n'
		printf '<link>%s</link>\n'       "${WWW}/posts/${post_bname%%.*}"
		printf '<title>%s</title>\n'     "$post_title"

		if is_yes "$RSS_INCLUDE_HTML"; then
			post_html="$(lowdown -Thtml "$post_md")"

			printf '<description>\n'
			printf '%s\n' "$post_html"
			printf '</description>\n'
		fi

		printf '<pubDate>%s</pubDate>\n' "$(date_to_rfc2822 "$post_date" '%F')"
		printf '</item>\n'
	done

	printf '</channel>\n'
	printf '</rss>\n'
}

# compile all .md files without .html couterparts
compile_posts() {
	posts="$(get_unpost_list)"

	# return if there are no posts to update
	if [ -z "$posts" ]; then
		log "no posts to update"
		return
	fi

	# for each .md file without a .html counterpart...
	for post in $posts; do
	
		if [ -z "$post" ]; then
			continue
		fi

		log "adding $(bname "$post")..."

		# md
		post_md="${post%%.*}.md"

		# get post date
		post_date="$(get_post_date "$post")"

		# the current date is the last modified date
		post_modified="$(date '+%F')"

		# get post title
		post_title="$(get_md_title "$post_md")"

		# generate html from markdown
		post_html="$(lowdown -Thtml "$post")"

		# generate info/footer
		post_foot="$(gen_html_info "$post_md" "$post_date" "$post_modified")"

		# generate the post's html
		gen_html_post "$post_title" "$post_html" "$post_foot" > "${post%%.*}.html"
	done

}

main() {

	# load config
	DEF_CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/shlog/shlog.conf"
	if [ -f "${DEF_CONFIG}" ]; then
		. "${DEF_CONFIG}"
	else
		log "cannot load config. exiting" "error"
		exit 1
	fi

	# 
	case "$1" in
		h|-h|help)   usage                                 ;;
		""|u|update) compile_posts                         ;;
		i|index)     gen_index > "$POSTS_INDEX"            ;;
		r|rss)       gen_rss > "$RSS_FEED"                 ;;
		*)           log "unsupported command $1" "error"  ;;
	esac
}

main "$@"
